openapi: 3.0.3
info:
  title: E-commerce API
  description: |
    이커머스 플랫폼 API 명세서

    ## 주요 기능
    - 상품 조회 및 인기 상품 통계
    - 장바구니 관리
    - 주문 생성 및 결제 (포인트, 쿠폰)
    - 선착순 쿠폰 발급
    - 포인트 충전 및 거래 내역
  version: 1.0.0
  contact:
    name: API Support
    email: phm543@gmail.com

servers:
  - url: http://localhost:8080/api/v1
    description: 로컬 개발 서버

tags:
  - name: Products
    description: 상품 관리
  - name: Cart
    description: 장바구니 관리
  - name: Orders
    description: 주문 및 결제
  - name: Coupons
    description: 쿠폰 발급 및 조회
  - name: Points
    description: 포인트 관리

paths:
  /products:
    get:
      tags:
        - Products
      summary: 상품 목록 조회
      description: 전체 상품 목록을 조회합니다.
      operationId: getProducts
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListResponse'
              example:
                status: true
                data:
                  - productId: 1
                    name: 노트북
                    price: 1500000
                    quantity: 50
                    createdAt: "2025-01-15T10:00:00"
                    updatedAt: "2025-01-20T15:30:00"
                  - productId: 2
                    name: 마우스
                    price: 35000
                    quantity: 0
                    createdAt: "2025-01-15T10:00:00"
                    updatedAt: "2025-01-20T15:30:00"
                error: null

  /products/{productId}:
    get:
      tags:
        - Products
      summary: 상품 상세 조회
      description: 특정 상품의 상세 정보를 조회합니다.
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: 상품 ID
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
              example:
                status: true
                data:
                  productId: 1
                  name: 노트북
                  price: 1500000
                  quantity: 50
                  createdAt: "2025-01-15T10:00:00"
                  updatedAt: "2025-01-20T15:30:00"
                error: null
        '404':
          description: 상품을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: false
                data: null
                error:
                  code: PRODUCT_NOT_FOUND
                  message: 상품이 존재하지 않습니다

  /products/popular:
    get:
      tags:
        - Products
      summary: 인기 상품 조회
      description: 최근 3일간 판매량 기준 상위 5개 상품을 조회합니다.
      operationId: getPopularProducts
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PopularProductListResponse'
              example:
                status: true
                data:
                  - productId: 1
                    name: 노트북
                    price: 1500000
                    totalSales: 150
                  - productId: 3
                    name: 키보드
                    price: 120000
                    totalSales: 98
                error: null

  /cart/items:
    put:
      tags:
        - Cart
      summary: 장바구니 상품 추가
      description: 장바구니에 상품을 추가하거나 수량을 증가시킵니다.
      operationId: addCartItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCartItemRequest'
            example:
              userId: 1
              productId: 1
              quantity: 3
      responses:
        '201':
          description: 생성됨
          headers:
            Location:
              schema:
                type: string
              description: 생성된 장바구니 아이템 URI
              example: /api/v1/cart/items/1
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItemResponse'
              example:
                status: true
                data:
                  cartItemId: 1
                  productId: 1
                  productName: 노트북
                  price: 1500000
                  quantity: 3
                error: null
        '404':
          description: 상품을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Cart
      summary: 장바구니 조회
      description: 사용자의 장바구니 목록을 조회합니다.
      operationId: getCartItems
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: integer
            format: int64
          description: 사용자 ID
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                status: true
                data:
                  items:
                    - cartItemId: 1
                      productId: 1
                      productName: 노트북
                      price: 1500000
                      quantity: 2
                    - cartItemId: 2
                      productId: 2
                      productName: 마우스
                      price: 35000
                      quantity: 1
                error: null

  /cart/items/{cartItemId}:
    patch:
      tags:
        - Cart
      summary: 장바구니 수량 변경
      description: 장바구니 상품의 수량을 변경합니다.
      operationId: updateCartItemQuantity
      parameters:
        - name: cartItemId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: 장바구니 아이템 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateQuantityRequest'
            example:
              quantity: 5
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItemResponse'
              example:
                status: true
                data:
                  cartItemId: 1
                  productId: 1
                  productName: 노트북
                  price: 1500000
                  quantity: 5
                error: null
        '404':
          description: 장바구니 아이템을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: false
                data: null
                error:
                  code: CART_ITEM_NOT_FOUND
                  message: 장바구니 아이템이 존재하지 않습니다
        '400':
          description: 유효하지 않은 수량
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: false
                data: null
                error:
                  code: INVALID_QUANTITY
                  message: 유효하지 않은 수량입니다
    delete:
      tags:
        - Cart
      summary: 장바구니 상품 삭제
      description: 장바구니에서 특정 상품을 삭제합니다.
      operationId: deleteCartItem
      parameters:
        - name: cartItemId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: 장바구니 아이템 ID
      responses:
        '204':
          description: 삭제 성공 (응답 본문 없음)
        '404':
          description: 장바구니 아이템을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: false
                data: null
                error:
                  code: CART_ITEM_NOT_FOUND
                  message: 장바구니 아이템이 존재하지 않습니다

  /orders:
    post:
      tags:
        - Orders
      summary: 주문 생성 및 결제
      description: |
        장바구니의 상품들로 주문을 생성하고 포인트로 결제를 처리합니다.
        쿠폰을 선택적으로 적용할 수 있습니다.
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
            example:
              userId: 1
              cartItemCouponMaps:
                - cartItemId: 1
                  userCouponId: 10
                - cartItemId: 2
                  userCouponId: 11
      responses:
        '201':
          description: 주문 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
              example:
                status: true
                data:
                  orderItems:
                    - orderItemId: 1
                      productId: 1
                      productName: 노트북
                      quantity: 2
                      price: 1500000
                      totalPrice: 3000000
                      discountAmount: 50000
                      finalAmount: 2950000
                      userCouponId: 10
                    - orderItemId: 2
                      productId: 2
                      productName: 마우스
                      quantity: 1
                      price: 35000
                      totalPrice: 35000
                      discountAmount: 5000
                      finalAmount: 30000
                      userCouponId: 11
                error: null
        '400':
          description: 잘못된 요청 (쿠폰 만료, 사용됨)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: false
                data: null
                error:
                  code: COUPON_EXPIRED
                  message: 만료된 쿠폰입니다
        '409':
          description: 재고 부족 또는 포인트 부족
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: false
                data: null
                error:
                  code: INSUFFICIENT_STOCK
                  message: 재고가 부족합니다

  /coupons/{couponId}/issue:
    post:
      tags:
        - Coupons
      summary: 쿠폰 발급
      description: 선착순 쿠폰을 발급받습니다.
      operationId: issueCoupon
      parameters:
        - name: couponId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: 쿠폰 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueCouponRequest'
            example:
              userId: 1
      responses:
        '201':
          description: 쿠폰 발급 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCouponResponse'
              example:
                status: true
                data:
                  userCouponId: 10
                  userId: 1
                  couponId: 1
                  couponName: 신규 가입 50000원 할인
                  discountAmount: 50000
                  issuedAt: "2025-01-20T10:00:00"
                  expiredAt: "2025-01-27T23:59:59"
                  validDays: 7
                error: null
        '409':
          description: 쿠폰 소진 또는 중복 발급
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: false
                data: null
                error:
                  code: COUPON_SOLD_OUT
                  message: 쿠폰이 모두 소진되었습니다

  /coupons:
    get:
      tags:
        - Coupons
      summary: 보유 쿠폰 조회
      description: 사용 가능한 쿠폰 목록을 조회합니다. (미사용 + 미만료)
      operationId: getUserCoupons
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: integer
            format: int64
          description: 사용자 ID
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCouponListResponse'
              example:
                status: true
                data:
                  - userCouponId: 11
                    couponId: 2
                    couponName: 10000원 할인
                    discountAmount: 10000
                    issuedAt: "2025-01-18T10:00:00"
                    expiredAt: "2025-01-21T23:59:59"
                  - userCouponId: 10
                    couponId: 1
                    couponName: 50000원 할인
                    discountAmount: 50000
                    issuedAt: "2025-01-15T10:00:00"
                    expiredAt: "2025-01-22T23:59:59"
                error: null

  /points:
    get:
      tags:
        - Points
      summary: 포인트 잔액 조회
      description: 사용자의 현재 포인트 잔액을 조회합니다.
      operationId: getPoints
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: integer
            format: int64
          description: 사용자 ID
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PointResponse'
              example:
                status: true
                data:
                  pointId: 1
                  userId: 1
                  amount: 50000
                  updatedAt: "2025-01-20T10:00:00"
                error: null

  /points/charge:
    post:
      tags:
        - Points
      summary: 포인트 충전
      description: 포인트를 충전합니다.
      operationId: chargePoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChargePointsRequest'
            example:
              userId: 1
              amount: 100000
      responses:
        '200':
          description: 충전 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargePointsResponse'
              example:
                status: true
                data:
                  pointId: 1
                  userId: 1
                  amount: 150000
                  chargedAmount: 100000
                  pointTransactionId: 123
                  createdAt: "2025-01-20T15:00:00"
                error: null
        '400':
          description: 유효하지 않은 금액
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: false
                data: null
                error:
                  code: INVALID_AMOUNT
                  message: 유효하지 않은 금액입니다

  /transactions:
    get:
      tags:
        - Points
      summary: 포인트 거래 내역 조회
      description: 포인트 충전/사용 내역을 조회합니다.
      operationId: getPointTransactions
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: integer
            format: int64
          description: 사용자 ID
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PointTransactionListResponse'
              example:
                status: true
                data:
                  - pointTransactionId: 125
                    pointId: 1
                    amount: -2980000
                    createdAt: "2025-01-20T15:30:00"
                  - pointTransactionId: 124
                    pointId: 1
                    amount: 100000
                    createdAt: "2025-01-20T15:00:00"
                error: null

components:
  schemas:
    # Request Schemas
    AddCartItemRequest:
      type: object
      required:
        - userId
        - productId
        - quantity
      properties:
        userId:
          type: integer
          format: int64
          description: 사용자 ID
        productId:
          type: integer
          format: int64
          description: 상품 ID
        quantity:
          type: integer
          format: int64
          minimum: 1
          description: 수량 (1 이상)

    UpdateQuantityRequest:
      type: object
      required:
        - quantity
      properties:
        quantity:
          type: integer
          format: int64
          minimum: 1
          description: 변경할 수량 (1 이상)

    CreateOrderRequest:
      type: object
      required:
        - userId
      properties:
        userId:
          type: integer
          format: int64
          description: 사용자 ID
        cartItemCouponMaps:
          type: array
          description: 장바구니 아이템별 쿠폰 매핑
          items:
            $ref: '#/components/schemas/CartItemCouponMap'

    CartItemCouponMap:
      type: object
      required:
        - cartItemId
        - userCouponId
      properties:
        cartItemId:
          type: integer
          format: int64
          description: 장바구니 아이템 ID
        userCouponId:
          type: integer
          format: int64
          description: 사용할 쿠폰 ID

    IssueCouponRequest:
      type: object
      required:
        - userId
      properties:
        userId:
          type: integer
          format: int64
          description: 사용자 ID

    ChargePointsRequest:
      type: object
      required:
        - userId
        - amount
      properties:
        userId:
          type: integer
          format: int64
          description: 사용자 ID
        amount:
          type: integer
          format: int64
          minimum: 1
          description: 충전 금액 (1 이상)

    # Response Schemas
    Product:
      type: object
      properties:
        productId:
          type: integer
          format: int64
        name:
          type: string
        price:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    PopularProduct:
      type: object
      properties:
        productId:
          type: integer
          format: int64
        name:
          type: string
        price:
          type: integer
          format: int64
        totalSales:
          type: integer
          format: int64

    CartItem:
      type: object
      properties:
        cartItemId:
          type: integer
          format: int64
        productId:
          type: integer
          format: int64
        productName:
          type: string
        price:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int64

    Cart:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'

    OrderItem:
      type: object
      properties:
        orderItemId:
          type: integer
          format: int64
        productId:
          type: integer
          format: int64
        productName:
          type: string
        quantity:
          type: integer
          format: int64
        price:
          type: integer
          format: int64
        totalPrice:
          type: integer
          format: int64
        discountAmount:
          type: integer
          format: int64
        finalAmount:
          type: integer
          format: int64
        userCouponId:
          type: integer
          format: int64
          nullable: true

    UserCoupon:
      type: object
      properties:
        userCouponId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        couponId:
          type: integer
          format: int64
        couponName:
          type: string
        discountAmount:
          type: integer
          format: int64
        issuedAt:
          type: string
          format: date-time
        expiredAt:
          type: string
          format: date-time
        validDays:
          type: integer

    Point:
      type: object
      properties:
        pointId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        amount:
          type: integer
          format: int64
        updatedAt:
          type: string
          format: date-time

    ChargedPoint:
      type: object
      properties:
        pointId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        amount:
          type: integer
          format: int64
        chargedAmount:
          type: integer
          format: int64
        pointTransactionId:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time

    PointTransaction:
      type: object
      properties:
        pointTransactionId:
          type: integer
          format: int64
        pointId:
          type: integer
          format: int64
        amount:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time

    # Response Wrappers
    ProductListResponse:
      type: object
      properties:
        status:
          type: boolean
        data:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        error:
          nullable: true
          type: object

    ProductResponse:
      type: object
      properties:
        status:
          type: boolean
        data:
          $ref: '#/components/schemas/Product'
        error:
          nullable: true
          type: object

    PopularProductListResponse:
      type: object
      properties:
        status:
          type: boolean
        data:
          type: array
          items:
            $ref: '#/components/schemas/PopularProduct'
        error:
          nullable: true
          type: object

    CartItemResponse:
      type: object
      properties:
        status:
          type: boolean
        data:
          $ref: '#/components/schemas/CartItem'
        error:
          nullable: true
          type: object

    CartResponse:
      type: object
      properties:
        status:
          type: boolean
        data:
          $ref: '#/components/schemas/Cart'
        error:
          nullable: true
          type: object

    OrderResponse:
      type: object
      properties:
        status:
          type: boolean
        data:
          type: object
          properties:
            orderItems:
              type: array
              items:
                $ref: '#/components/schemas/OrderItem'
        error:
          nullable: true
          type: object

    UserCouponResponse:
      type: object
      properties:
        status:
          type: boolean
        data:
          $ref: '#/components/schemas/UserCoupon'
        error:
          nullable: true
          type: object

    UserCouponListResponse:
      type: object
      properties:
        status:
          type: boolean
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserCoupon'
        error:
          nullable: true
          type: object

    PointResponse:
      type: object
      properties:
        status:
          type: boolean
        data:
          $ref: '#/components/schemas/Point'
        error:
          nullable: true
          type: object

    ChargePointsResponse:
      type: object
      properties:
        status:
          type: boolean
        data:
          $ref: '#/components/schemas/ChargedPoint'
        error:
          nullable: true
          type: object

    PointTransactionListResponse:
      type: object
      properties:
        status:
          type: boolean
        data:
          type: array
          items:
            $ref: '#/components/schemas/PointTransaction'
        error:
          nullable: true
          type: object

    # Error Schema
    ErrorResponse:
      type: object
      properties:
        status:
          type: boolean
          example: false
        data:
          nullable: true
          type: object
        error:
          type: object
          properties:
            code:
              type: string
              enum:
                - PRODUCT_NOT_FOUND
                - CART_ITEM_NOT_FOUND
                - ORDER_NOT_FOUND
                - USER_NOT_FOUND
                - COUPON_NOT_FOUND
                - INSUFFICIENT_STOCK
                - INSUFFICIENT_POINTS
                - COUPON_SOLD_OUT
                - COUPON_ALREADY_ISSUED
                - COUPON_EXPIRED
                - COUPON_ALREADY_USED
                - INVALID_AMOUNT
                - INVALID_QUANTITY
                - INVALID_REQUEST
                - INTERNAL_SERVER_ERROR
            message:
              type: string
